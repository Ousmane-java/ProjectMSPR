import nmap
from django.core.management.base import BaseCommand
from django.utils.timezone import now
from sondes.models import Franchise, NetworkScan

class Command(BaseCommand):
    help = "Scanne le r√©seau et enregistre les r√©sultats."

    def handle(self, *args, **kwargs):
        nm = nmap.PortScanner()
        franchises = Franchise.objects.all()

        for franchise in franchises:
            try:
                print(f"üîç Scan de {franchise.name} ({franchise.ip_address}) en cours...")
                nm.scan(franchise.ip_address, arguments="-p 1-65535 -O -sV")  # D√©tection OS + Scan des services

                if franchise.ip_address not in nm.all_hosts():
                    print(f"‚ùå Aucun h√¥te trouv√© pour {franchise.name}")
                    continue

                open_ports = []
                services = []
                os_detected = "Inconnu"
                vulnerabilities = []
                latency = None

                # üîπ D√©tecter les ports ouverts et services actifs
                for port, info in nm[franchise.ip_address].get("tcp", {}).items():
                    if info["state"] == "open":
                        open_ports.append(str(port))
                        service_name = info.get("name", "Inconnu")
                        service_version = info.get("version", "Inconnu")
                        services.append(f"{port}/{service_name} ({service_version})")

                # üîπ D√©tection du syst√®me d'exploitation
                if "osmatch" in nm[franchise.ip_address]:
                    os_matches = nm[franchise.ip_address]["osmatch"]
                    if os_matches:
                        os_detected = os_matches[0]["name"]

                # üîπ V√©rifier la latence r√©seau
                if "times" in nm[franchise.ip_address]:
                    latency = nm[franchise.ip_address]["times"].get("srtt", 0) / 1000.0  # Convertir en ms

                # üîπ D√©tection de vuln√©rabilit√©s basiques
                vuln_ports = {
                    21: "‚ö†Ô∏è FTP (port 21) peut √™tre vuln√©rable.",
                    23: "‚ö†Ô∏è Telnet (port 23) non s√©curis√©.",
                    3389: "‚ö†Ô∏è RDP (port 3389) peut √™tre √† risque.",
                }
                for port in open_ports:
                    if int(port) in vuln_ports:
                        vulnerabilities.append(vuln_ports[int(port)])

                # üîπ Enregistrement des r√©sultats
                NetworkScan.objects.create(
                    franchise=franchise,
                    ip_address=franchise.ip_address,
                    open_ports=", ".join(open_ports) if open_ports else "Aucun",
                    services=", ".join(services) if services else "Aucun",
                    os_detected=os_detected,
                    vulnerabilities=", ".join(vulnerabilities) if vulnerabilities else "Aucune",
                    latency=latency,
                    scan_time=now()
                )

                # üîπ Affichage des r√©sultats
                print(f"‚úÖ R√©sultat pour {franchise.name} ({franchise.ip_address}):")
                print(f"   - Ports ouverts : {', '.join(open_ports) if open_ports else 'Aucun'}")
                print(f"   - Services actifs : {', '.join(services) if services else 'Aucun'}")
                print(f"   - OS d√©tect√© : {os_detected}")
                print(f"   - Vuln√©rabilit√©s : {', '.join(vulnerabilities) if vulnerabilities else 'Aucune'}")
                print(f"   - Latence : {latency} ms\n")

            except Exception as e:
                print(f"‚ùå Erreur lors du scan de {franchise.name}: {e}")

        self.stdout.write(self.style.SUCCESS("‚úÖ Scan termin√© avec succ√®s !"))
